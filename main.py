from aiogram import types
from loader import dp, bot 
from aiogram.utils import executor
from models import Person
from states import StartState, CahngeProfileState, Adm_State, Dialogue_State
from aiogram.dispatcher import FSMContext
import re
import asyncio



@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    admin_role_button = types.InlineKeyboardButton('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', callback_data='admin_role_button')
    user_role_button = types.InlineKeyboardButton('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', callback_data='user_role_button')
    keyboard = types.InlineKeyboardMarkup().row(admin_role_button, user_role_button)
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.', reply_markup=keyboard)

@dp.message_handler(commands=['schedule'])
async def schedule(msg: types.Message):
    message = '''–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:


–ü—è—Ç–Ω–∏—Ü–∞ 18:00 - –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –õ—É–∂–Ω–∏–∫–∏ | —É–ª. –õ—É–∂–Ω–∏–∫–∏, 24, —Å—Ç—Ä. 22, –ú–æ—Å–∫–≤–∞

–°—Ä–µ–¥–∞ 17:00 - –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –õ—É–∂–Ω–∏–∫–∏ | —É–ª. –õ—É–∂–Ω–∏–∫–∏, 24, —Å—Ç—Ä. 22, –ú–æ—Å–∫–≤–∞

–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 19:00 - –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –õ—É–∂–Ω–∏–∫–∏ | —É–ª. –õ—É–∂–Ω–∏–∫–∏, 24, —Å—Ç—Ä. 22, –ú–æ—Å–∫–≤–∞

'''
    await msg.answer(message)


async def get_user_profile(msg):
    user_data = Person.get(Person.telegram_id == msg.from_user.id)
    if not user_data:
        await msg.answer('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.')
        return
    name = user_data.name
    phone = user_data.phone
    birthday = user_data.birthday
    message = f'''
–§–ò–û: {name}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}
–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday}

–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?
'''
    change_name_button = types.InlineKeyboardButton('–§–ò–û', callback_data='change_button_name')
    change_phone_button = types.InlineKeyboardButton('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', callback_data='change_button_phone')
    change_birthday_button = types.InlineKeyboardButton('–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data='change_button_birthday')
    keyboard = types.InlineKeyboardMarkup().row(change_name_button, change_phone_button).add(change_birthday_button)
    await msg.answer(message, reply_markup=keyboard)

@dp.message_handler(commands=['my_profile'])
async def change_profile_data(msg: types.Message):
    person = Person.get_or_none(Person.telegram_id == msg.from_user.id)
    if person.role == 'admin':
        await msg.answer('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤')
        return
    await get_user_profile(msg)

@dp.callback_query_handler(lambda call: call.data.startswith('change_button'))
async def change_data(call: types.CallbackQuery):
    await call.message.delete()
    data_for_change = call.data.split('_')[2]
    if data_for_change == 'name':
        await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –§–ò–û')
        await CahngeProfileState.name.set()
    if data_for_change == 'phone':
        await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 89000000000(—á–∏—Å–ª–∞ –ø–æ–¥—Ä—è–¥)')
        await CahngeProfileState.phone_number.set()
    if data_for_change == 'birthday':
        await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.1970')
        await CahngeProfileState.birthday.set()


@dp.message_handler(state=CahngeProfileState.name)
async def change_name(msg: types.Message, state: FSMContext):
    person = Person.get(Person.telegram_id == msg.from_user.id)
    person.name = msg.text
    person.save()
    await msg.answer('–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ')
    await get_user_profile(msg)
    await state.finish()

@dp.message_handler(state=CahngeProfileState.phone_number)
async def change_phone(msg: types.Message, state: FSMContext):
    if msg.text.isdigit() and len(msg.text) == 11:
        person = Person.get(Person.telegram_id == msg.from_user.id)
        person.phone = msg.text
        person.save()
        await msg.answer('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω')
        await get_user_profile(msg)
        await state.finish()
    else:
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')

@dp.message_handler(state=CahngeProfileState.birthday)
async def change_birthday(msg: types.Message, state: FSMContext):
    regex = r"\d{2}\.\d{2}\.\d{4}"
    if not re.search(regex, msg.text):
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
        return
    person = Person.get(Person.telegram_id == msg.from_user.id)
    person.birthday = msg.text
    person.save()
    await msg.answer('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞')
    await get_user_profile(msg)
    await state.finish()

@dp.message_handler(commands=['training_today'])
async def get_training_info(msg: types.Message):
    person = Person.get_or_none(Person.telegram_id == msg.from_user.id)
    if person.role == 'admin':
        await msg.answer('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤')
        return
    message = f'''–£–≤–∞–∂–∞–µ–º—ã–π –∏–≥—Ä–æ–∫!
–°–µ–≥–æ–¥–Ω—è 31.10.2023 –≤ 18:00 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
üèü –°—Ç–∞–¥–∏–æ–Ω: –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –õ—É–∂–Ω–∏–∫–∏
üìç–ê–¥—Ä–µ—Å: —É–ª. –õ—É–∂–Ω–∏–∫–∏, 24, —Å—Ç—Ä. 22, –ú–æ—Å–∫–≤–∞

–í—ã –ø–æ–π–¥—ë—Ç–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?

<a href="https://yandex.ru/maps/-/CDa1zP5v">–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</a>
'''
    second_accept_button = types.InlineKeyboardButton('–ü–æ–π–¥—É', callback_data='accept_button')
    declain_button = types.InlineKeyboardButton('–ù–µ –ø–æ–π–¥—É', callback_data='declain_button')
    keyboard = types.InlineKeyboardMarkup().row(declain_button, second_accept_button)
    await bot.send_message(disable_web_page_preview=True, chat_id=msg.from_user.id, text=message, reply_markup=keyboard)



@dp.callback_query_handler(lambda call: call.data == 'admin_role_button')
async def set_admin_role(call: types.CallbackQuery):
    await call.message.delete()
    person = Person.get_or_none(Person.telegram_id == call.from_user.id)
    if not person:
        Person.create(telegram_id=call.from_user.id, role='admin')
    else:
        person.role = 'admin'
        person.save()
    button_1 = types.KeyboardButton('–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üèí')
    button_2 = types.KeyboardButton('–†—É–ø–æ—Ä üì¢')
    button_3 = types.KeyboardButton('–û—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üìä')
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(button_3, button_1)
    keyboard.row(button_2)
    await call.message.answer('–†–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞.', reply_markup=keyboard)

@dp.message_handler(content_types=['text'])
async def admin_commands(msg: types.Message):
    person = Person.get_or_none(Person.telegram_id == msg.from_user.id)
    if person.role == 'admin':
        if msg.text == '–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üèí':
            persons = Person.select().where(Person.role == 'user')
            if persons:
                message = '–ù–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø—Ä–∏–¥—É—Ç:\n\n'
                count = 1
                for person in persons:
                    message += f'‚úÖ {count}) {person.name}\n'
                    count += 1  
                await msg.answer(message)
            else:
                await msg.answer('–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è')
        elif msg.text == '–†—É–ø–æ—Ä üì¢':
            cancel_megaphone_button = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', 
                                                                callback_data='cancel_megaphone_button')
            keyboard = types.InlineKeyboardMarkup().add(cancel_megaphone_button)
            await msg.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —É–≤–∏–¥—è—Ç –≤—Å–µ –∏–≥—Ä–æ–∫–∏.', reply_markup=keyboard)
            await Adm_State.megaphone.set()
        elif msg.text == '–û—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üìä':
            message = '''–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ—à–µ–¥—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:

–ò–≥—Ä–æ–∫1 (–§–ò–û) - 3
–ò–≥—Ä–æ–∫2 (–§–ò–û) - 4
–ò–≥—Ä–æ–∫3 (–§–ò–û) - 5
–ò–≥—Ä–æ–∫4 (–§–ò–û) - 5
–ò–≥—Ä–æ–∫5 (–§–ò–û) - 5
–ò–≥—Ä–æ–∫6 (–§–ò–û) - 5

–°—Ä–µ–¥–Ω–∏–π –±–∞–ª: 4.5
'''
            await msg.answer(message)


@dp.callback_query_handler(lambda call: call.data == 'cancel_megaphone_button', state=Adm_State.megaphone)
async def cancel_megaphone(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await state.finish()
    await call.message.answer('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ.')

@dp.message_handler(state=Adm_State.megaphone)
async def send_megaphone(msg: types.Message, state: FSMContext):
    await msg.answer('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')
    await state.finish()
    persons = Person.select().where(Person.role == 'user')
    if persons:
        for person in persons:
            message = '‚ùóÔ∏è–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞‚ùóÔ∏è\n\n'
            message += msg.text
            await bot.send_message(person.telegram_id, message)

@dp.callback_query_handler(lambda call: call.data == 'user_role_button')
async def set_user_role(call: types.CallbackQuery):
    await call.message.delete()
    person = Person.get_or_none(Person.telegram_id == call.from_user.id)
    if not person:
        Person.create(telegram_id=call.from_user.id, role='user')
    else:
        person.role = 'user'
        person.save()
    sign_up_button = types.InlineKeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data='sign_up_button')
    keyboard = types.InlineKeyboardMarkup().add(sign_up_button)
    await call.message.answer('–†–æ–ª—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞–Ω–∞.', reply_markup=types.ReplyKeyboardRemove())
    await call.message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', 
                            reply_markup=keyboard)


@dp.callback_query_handler(lambda call: call.data == 'sign_up_button')
async def sign_up(call: types.CallbackQuery):
    await call.message.delete()
    message = '''
–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—Å—è. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à–∏ –§–ò–û.'''

    await call.message.answer(message)
    await StartState.name.set()

@dp.message_handler(state=StartState.name)
async def get_name(msg: types.Message):
    person = Person.get_or_none(Person.telegram_id == msg.from_user.id)
    person.name = msg.text
    person.save()
    await msg.answer('''–ü—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
–í —Ñ–æ—Ä–º–∞—Ç–µ: 89000000000(—á–∏—Å–ª–∞ –ø–æ–¥—Ä—è–¥)''')
    await StartState.phone_number_sign_up.set()

@dp.message_handler(state=StartState.phone_number_sign_up)
async def get_tel_number(msg: types.Message, state: FSMContext):
    if msg.text.isdigit() and len(msg.text) == 11:
        person = Person.get_or_none(Person.telegram_id == msg.from_user.id)
        person.phone = msg.text
        person.save()
        await msg.answer('''–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ö–æ–≥–¥–∞ —É –í–∞—Å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è?
–£–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.1970''')
        await StartState.birthday.set()
    else:
        await msg.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 11 —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')

@dp.message_handler(state=StartState.birthday)
async def get_birthday(msg: types.Message, state: FSMContext):
    regex = r"\d{2}\.\d{2}\.\d{4}"
    if not re.search(regex, msg.text):
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
        return
    person = Person.get_or_none(Person.telegram_id == msg.from_user.id)
    person.birthday = msg.text
    person.save()
    await msg.answer(f'''
–§–ò–û: {person.name}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {person.phone}
–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {msg.text}

–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å!
–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /my_profile
–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ —è —Å–æ–æ–±—â—É –í–∞–º –º–µ—Å—Ç–æ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –í–∞—à–µ–π –ø–µ—Ä–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.

(–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω–æ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã)
''')
    await state.finish()
    await asyncio.sleep(2)

    message = f'''–£–≤–∞–∂–∞–µ–º—ã–π –∏–≥—Ä–æ–∫!
–°–µ–≥–æ–¥–Ω—è 31.10.2023 –≤ 18:00 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
üèü –°—Ç–∞–¥–∏–æ–Ω: –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –õ—É–∂–Ω–∏–∫–∏
üìç–ê–¥—Ä–µ—Å: —É–ª. –õ—É–∂–Ω–∏–∫–∏, 24, —Å—Ç—Ä. 22, –ú–æ—Å–∫–≤–∞

–í—ã –ø–æ–π–¥—ë—Ç–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?

<a href="https://yandex.ru/maps/-/CDa1zP5v">–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</a>
'''
    second_accept_button = types.InlineKeyboardButton('–ü–æ–π–¥—É', callback_data='accept_button')
    declain_button = types.InlineKeyboardButton('–ù–µ –ø–æ–π–¥—É', callback_data='declain_button')
    keyboard = types.InlineKeyboardMarkup().row(declain_button, second_accept_button)
    await bot.send_message(disable_web_page_preview=True, chat_id=msg.from_user.id, text=message, reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data == 'accept_button')
async def accept(call: types.CallbackQuery):
    await call.message.delete()
    person = Person.get_or_none(Person.telegram_id == call.from_user.id)
    person.accept = True
    person.save()
    await call.message.answer('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞. –ñ–¥—ë–º –í–∞—Å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!')

@dp.callback_query_handler(lambda call: call.data == 'declain_button')
async def declain(call: types.CallbackQuery):
    await call.message.delete()
    person = Person.get_or_none(Person.telegram_id == call.from_user.id)
    person.accept = False
    person.save()
    await call.message.answer('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ñ–¥—ë–º –í–∞—Å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!')



if __name__ == '__main__':
    executor.start_polling(dp)